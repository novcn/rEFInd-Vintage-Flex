#!/usr/bin/env bash

RVF_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
COLORSHIFT_URL="https://github.com/novcn/colorshift"

#
# Defaults options
#
declare TEXT_COLOR
declare ICON_COLOR
VERBOSE=0
FOREGROUND="#000000"
BACKGROUND="#FFFFFF"
WAL=0
XRDB=0
TEXT=""
TEXT_BORDER="-"
TEXT_Y_BORDER_PADDING=12
TEXT_X_BORDER_PADDING=4
ICONS_DIR="${RVF_DIR}/icons/white/"


trace() {
  [[ "$VERBOSE" == "1" ]] && {
    echo -e "\\033[93mtrace: \\033[97m$*\\033[39m"
  }
}

info() {
  echo -e " \\033[96m--> \\033[97m$*\\033[39m"
}

die() {
  echo "${1:-usage : ${0##*/} [ options ] }" 2>&1
  [ "$1" ] && exit 1
  cat > /dev/stdout <<EOF
${0} [ options ]

  options:
    -h | --help         show help
    -v | --verbose      verbose mode
    -f | --foreground   color for rendered foreground objects, defaults to #000000
    -b | --background  color for rendered background objects, defaults to #FFFFFF
    --text-color        color for rendered text. falls back to --color if not set
    --icon-color        color for rendered icons. falls back to --color if not set
    --wal               use colors from wal cache (~/.cache/wal)
    --xrdb              use colors from xrdb (xrdb -query)
    --text              text or file with text to transpose on background image
    --font              font to use for transposed text. defaults to CodingFontTobi
    --text-border       character to use as a border. defaults to empty
    --y-boder-padding   y-cartesian spaces around the border of text. defaults to 12
    --x-boder-padding   x-cartesian spaces around the border of text. defaults to 4
    --disable-progress  disable the progress bar
EOF
  exit 0
}

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help)
      die
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -f|--foreground)
      FOREGROUND="$2"
      shift
      ;;
    -b|--background)
      BACKGROUND="$2"
      shift
      ;;
    --text-color)
      TEXT_COLOR="$2"
      shift
      ;;
    --wal)
      WAL=1
      ;;
    --xrdb)
      XRDB=1
      ;;
    --icon-color)
      ICON_COLOR="$2"
      shift
      ;;
    --text)
      TEXT="$2"
      shift
      ;;
    --text-border)
      TEXT_BORDER="$2"
      shift
      ;;
    --text-x-border-padding)
      TEXT_X_BORDER_PADDING="$2"
      shift
      ;;
    --text-y-border-padding)
      TEXT_Y_BORDER_PADDING="$2"
      shift
      ;;
    --disable-progress)
      DISABLE_PROGRESS=1
      shift
      ;;
    *)
      die "Unknown parameter passed: $1"
      ;;
  esac
  shift
done

count_files() {
  printf "%s\n" "$#"
}

update_progress() {
  [ "$VERBOSE" == "0" ] && [ "$DISABLE_PROGRESS" != "1" ] && {
    SCREEN_LENGTH=128
    type tput &> /dev/null && {
      SCREEN_LENGTH=$(tput cols)
    }
    # Cursor home position 0,0
    printf '\e[H'
    printf '['
    total=$(count_files "${ICONS_DIR}/"*)
    # Hack since count_files returns 1 when dir is empty
    [ -z "$(ls ${RVF_DIR}/tmp)" ] \
      && current=0 \
      || current=$(count_files "${RVF_DIR}/tmp/"*.png)
    progress=$((current * SCREEN_LENGTH / total))
    remaining=$((SCREEN_LENGTH - progress - 2))
    printf %${progress}s | tr " " "="
    printf %${remaining}s
    printf ']'
  }
}

#
# Set foreground color from xrdb or wal if those options are passed
#
[ "$XRDB" == "1" ] && [ "$WAL" == "1" ] &&
  die "error : invalid options. cannot pass both --xrdb and --wal"

[ "$XRDB" == "1" ] && {
  FOREGROUND=$(xrdb -query | grep -P '\*foreground:' | awk '{ print $2 }')
  BACKGROUND=$(xrdb -query | grep -P '\*background:' | awk '{ print $2 }')
}

[ "$WAL" == "1" ] && {
  # TODO: check existence
  source $HOME/.cache/wal/colors.sh
  FOREGROUND="$foreground"
  BACKGROUND="$background"
}

trace "selected colors foreground: $FOREGROUND background: $BACKGROUND"

install_colorshift() {
  [ -x "${RVF_DIR}/util/colorshift" ] || {
    info "Installing colorshift script from $COLORSHIFT_URL"
    git clone "$COLORSHIFT_URL" "${RVF_DIR}/tmp/colorshift"
    cp "${RVF_DIR}/tmp/colorshift/colorshift" "${RVF_DIR}/util/colorshift"
    chmod +x "${RVF_DIR}/util/colorshift"
  }
}

hex_to_rgb() {
  : "${1/\#}"
  ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))
  echo "$r $g $b"
}

within_threshold() {
  hex="${1:?}"
  rgb=$(hex_to_rgb "$hex")
  [ $(awk '{print $1}' <<< "$rgb") -gt 150 ] && return 0
  [ $(awk '{print $2}' <<< "$rgb") -gt 150 ] && return 0
  [ $(awk '{print $3}' <<< "$rgb") -gt 150 ] && return 0
}

#
#
#
clean() {
  info "cleaning up any past renderings"
  # remove files in tmp
  for file in "${RVF_DIR}/tmp/"*; do
    trace "removing $file"
    [ -d "$file" ] && rm -rf "$file" || rm -f "$file"
  done

  # remove output icons
  for file in "${RVF_DIR}/output/icons/"*; do
    trace "removing $file"
    rm -f "$file"
  done

  # remove icon directory
  [ -e "${RVF_DIR/output/icons}" ] || {
    trace "removing directory ./output/icons"
    rmdir "${RVF_DIR}/output/icons"
  }

  # remove other output files
  for file in "${RVF_DIR}/output/icons/"*; do
    trace "removing $file"
    rm -f "$file"
  done
}

#
# Build center aligned text
#
build_text() {
  local text="$TEXT"
  # the max line length
  IFS=$'\n'
  max_len=0
  for line in $text; do 
    line_len=$(wc -c <<< "$line")
    if [ "$line_len" -gt "$max_len" ]; then
      max_len=$line_len
    fi
  done

  x_border=$(echo "$max_len" + "$TEXT_X_BORDER_PADDING" | bc)
  printf " "
  eval printf '–%.0s' {0..${x_border}}
  echo ""

  # TODO: use TEXT_Y_BORDER_PADDING variable
  text=$(printf '\n %.0s' {0..1}; echo "$text")
  text=$(echo -n "$text"; printf '\n %.0s' {0..0})

  # print each line shifted such that text is centered
  for line in $text; do 
    line_len=$(wc -c <<< "$line")
    justify_amt=$(echo "(($x_border - $line_len) / 2) - 1" | bc)
    x_right_border=$(echo "$x_border - $line_len - $justify_amt" | bc)

    # print each line prepending $justify_amt spaces
    printf "|"
    eval printf '\ %.0s' {0..${justify_amt}}
    echo -n "$line"
    eval printf '\ %.0s' {0..${x_right_border}}
    printf "|"
    echo ""
  done

  printf " "
  eval printf '–\%.0s' {0..${x_border}}
  echo ""
}

#
# Render passed $TEXT onto background if it exists, otherwise just copy over the chosen background
#
render_background() {
  info "rendering background"
  [ "$TEXT" != "" ] && {
    text_color="${TEXT_COLOR:-${FOREGROUND}}"
    output=$(build_text)
    convert -fill "$BACKGROUND" -tint 90% "${RVF_DIR}/backgrounds/darkstatic.png" "${RVF_DIR}/tmp/background.png"
    convert "${RVF_DIR}/tmp/background.png" \
      -font CodingFontTobi -gravity North -fill "$text_color" -pointsize 32 -annotate +0+30 "$output" \
      "${RVF_DIR}/output/background.png"
  } || {
    # TODO: tint works better when a lightened color is passed. I think to do this optimally we'd convert to HSL
    # increase the light factor and then convert back to RGB hex. See https://www.rapidtables.com/convert/color/hsl-to-rgb.html
    convert -fill "$BACKGROUND" -tint 90% "${RVF_DIR}/backgrounds/darkstatic.png" "${RVF_DIR}/output/background.png"
  }
}

#
# For each color, compare it with the desired output color to get an RGB shift amount
#
rgb_shift_amnt() {
  local desired=$(sed 's/#//g' <<< ${1:?} | tr '[:lower:]' '[:upper:]')
  local initial=$(sed 's/#//g' <<< ${2:?} | tr '[:lower:]' '[:upper:]')
  local output=""

  for idx in $(seq 1 3); do
    init=$(fold -w2 <<< "$initial" | awk "NR == $idx")
    des=$(fold -w2 <<< "$desired" | awk "NR == $idx")
    inter=$(echo "ibase=16; $init - $des" | bc | tr '\n' ' ')
    inter=$(echo "$inter * -1" | bc) # TODO: simplify this
    output="$output $inter"
  done

  echo "$output"
}

#
# Shift colors by rgb amounts
#
shift_colors() {
  initial=${1:?}
  initial=$(cut -c -7 <<< "$initial")
  rshift=${2:?}
  gshift=${3:?}
  bshift=${4:?}

  desired=$("$RVF_DIR/util/colorshift" -l -r "$rshift" -g "$gshift" -b "$bshift" "$initial")
  echo "$desired"
}

#
# Render the icons with the passed FOREGROUND as a gradient so that the original icon's noise will be preserved w/ the new color
#
render_icons_gradient() {
  info "rendering icons as gradient. this will take a long while..."
  type fortune &> /dev/null && {
    info "here's your fortune for you to mull over while you wait"
    info ""
    info $(printf '    %s' $(fortune))
    info ""
  }

  local color="${ICON_COLOR:-${FOREGROUND}}"
  for icon in "${ICONS_DIR}/"*; do
    update_progress
    icon_name=$(basename "$icon")
    #info "rendering $icon_name"

    cp "$icon" "${RVF_DIR}/tmp/$icon_name"
    icon="${RVF_DIR}/tmp/$icon_name"

    # Get every color in the image except for the color that appears most (in this case our background)
    # TODO: there are some icons which the background color isn't the most prevelant. We'll have to update this for that.
    # Should be able to just assume black is background
    trace "loading initial colors for $icon"
    initial_colors=$(convert $icon txt:- | awk '{print $3}' | rg -v pixel | sort | uniq -c | sort -n | head -n -1 | awk '{print $2}')
    most_prevalent=$(tail -n1 <<< "$initial_colors")

    #rgb_shift_amnt "$most_prevalent" "$foreground"
    cshift=$(rgb_shift_amnt "$color" "$most_prevalent")
    rshift=$(awk '{print $1}' <<< "$cshift")
    gshift=$(awk '{print $2}' <<< "$cshift")
    bshift=$(awk '{print $3}' <<< "$cshift")

    inter_icon=tmp/inter_${icon_name}
    cp "$icon" "$inter_icon"
    for initial in ${initial_colors[@]}; do
      alpha=$(sed 's/#//g' <<< "$initial" | fold -w2 | tail -n1)
      initial=$(cut -c -7 <<< "$initial")

      within_threshold "$initial" && {
        desired=$("$RVF_DIR/util/colorshift" -l -r "$rshift" -g "$gshift" -b "$bshift" "$initial")
        trace "mapping $initial -> $desired $inter_icon"
        convert "$inter_icon" -fuzz 0% -fill "${desired}${alpha}" -opaque "${initial}${alpha}" "$inter_icon"
      }
    done

    mv "$inter_icon" "${RVF_DIR}/output/icons/$icon_name"
  done
  update_progress
}

render_icons() {
  mkdir -p "${RVF_DIR}/output/icons"
  # TODO: The idea is that you might just want a solid color. If that's the case another function will have to be written / used
  render_icons_gradient
}

clean
install_colorshift

render_background
render_icons
info "job's done"
